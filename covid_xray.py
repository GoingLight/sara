# -*- coding: utf-8 -*-
"""covid-xray.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHTzY6-Cwt2TcT6SrQHtqqXfUJkWlybo
"""

from tensorflow.keras.models import load_model
from PIL import Image, ImageOps
import numpy as np

# Load the model
model = load_model('keras_model.h5')

# !pip install pillow

# Let's read filenames for testing
from os import listdir
from os.path import isfile, join
path_covid= 'Covid_test'
covid_files = [f for f in listdir(path_covid) if isfile(join(path_covid, f))]
path_normal = 'Normal_test'
normal_files = [f for f in listdir(path_normal) if isfile(join(path_normal, f))]

labels=['COVID-19', 'Normal', 'Viral pneumonia']
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1.
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
# Replace this with the path to your image
path = f"Covid_test/{covid_files[0]}"
# image = Image.open(path)
image = Image.open(path).convert('RGB')
#resize the image to a 224x224 with the same strategy as in TM2:
#resizing the image to be at least 224x224 and then cropping from the center
size = (224, 224)
image = ImageOps.fit(image, size, Image.ANTIALIAS)

#turn the image into a numpy array
image_array = np.asarray(image)
# Normalize the image
normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
# Load the image into the array
data[0] = normalized_image_array

# run the inference
prediction = model.predict(data)[0]
print(prediction)
print(labels[prediction.argmax()])

labels=['COVID-19', 'Normal', 'Viral pneumonia']
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1.
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
# Replace this with the path to your image
predictions=[]
for file in covid_files:
    path = f"Covid_test/{file}"
    # image = Image.open(path)
    image = Image.open(path).convert('RGB')
    #resize the image to a 224x224 with the same strategy as in TM2:
    #resizing the image to be at least 224x224 and then cropping from the center
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.ANTIALIAS)

    #turn the image into a numpy array
    image_array = np.asarray(image)
    # Normalize the image
    normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
    # Load the image into the array
    data[0] = normalized_image_array

    # run the inference
    pred = model.predict(data)[0]
    # print(prediction)
    # print(labels[pred.argmax()])
    predictions.append(labels[pred.argmax()]==labels[0])

print(f"COVID-19 prediction accuracy: {sum(predictions)/len(predictions)*100}%")

# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1.
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
# Replace this with the path to your image
predictions=[]
for file in normal_files:
    path = f"Normal_test/{file}"
    # image = Image.open(path)
    image = Image.open(path).convert('RGB')
    #resize the image to a 224x224 with the same strategy as in TM2:
    #resizing the image to be at least 224x224 and then cropping from the center
    size = (224, 224)
    image = ImageOps.fit(image, size, Image.ANTIALIAS)

    #turn the image into a numpy array
    image_array = np.asarray(image)
    # Normalize the image
    normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
    # Load the image into the array
    data[0] = normalized_image_array

    # run the inference
    pred = model.predict(data)[0]
    # print(prediction)
    print(labels[pred.argmax()])
    predictions.append(labels[pred.argmax()]==labels[1])
print(f"Normal X-Ray prediction accuracy: {sum(predictions)/len(predictions)*100}%")